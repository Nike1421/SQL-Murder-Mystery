
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, messagebox, font
from PIL import Image, ImageTk
import requests

from game_constants import questions, hints
import file_path_constants as FPC
from scoreboard import Scoreboard

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def disable_components():
    hint_button["state"] = "disabled"
    execute_button["state"] = "disabled"
    sql_entry.delete("1.0", 'end-1c')
    sql_entry.config(state="disabled")
    congratulate()
    pass


def congratulate():
    user_score = game_scoreboard.score
    text = ''
    if user_score == 820:
        text = 'You are a SQL Grandmaster!!'
    elif user_score >= 600 and user_score < 820:
        text = 'You are a SQL Master!'
    else:
        text = 'You need more SQL Skills to find the murderer.'
    table_label.config(image='', text=text)
    pass


def level_up_gui():
    game_scoreboard.level_up()
    sql_entry.delete("1.0", 'end-1c')
    update_points()
    update_detective_text()


def wrong_answer():
    game_scoreboard.wrong_answer()
    canvas.itemconfig(detective_question,
                      text="questions[game_scoreboard.level - 1]")
    window.after(5000)
    update_detective_text()
    update_points()
    if game_scoreboard.score == 0:
        flag = messagebox.askyesno(
            "You Failed!", "You have run out of points. Start Again?")
        if flag:
            reset_game()
        else:
            window.destroy()


def reset_game():
    game_scoreboard.reset()
    update_points()
    table_label.config(image='', text='')
    sql_entry.delete("1.0", 'end-1c')
    hint_button["state"] = "normal"
    execute_button["state"] = "normal"
    update_detective_text()


def update_points():
    canvas.itemconfig(points_counter, text=str(game_scoreboard.score))


def update_detective_text():
    canvas.itemconfig(detective_question,
                      text=questions[game_scoreboard.level - 1])


def update_table():
    # Declare image as global to avoid garbage collection
    global image

    # Open the output image
    image = Image.open(FPC.output_image_path)

    # Resize the image to fit the space
    height = 291 if image.height > 291 else image.height
    image = image.resize((533, height))

    # Set the image
    table_output_image = ImageTk.PhotoImage(image=image)

    # Add image to Label
    table_label.configure(image=table_output_image)

    table_label.image = table_output_image


def show_hint():
    # Do something to show hint

    # Disable the Hint Button
    hint_button["state"] = "disabled"
    pass


def verify_answers():
    # Set Flag
    verify_correct = False

    # Form the request object
    form_data = {
        "query": sql_entry.get("1.0", 'end-1c'),
        "level": game_scoreboard.level - 1
    }

    # API Call
    response = requests.post(
        'http://127.0.0.1:5000/check',
        data=form_data
    )

    # If no errors in SQL
    if response.status_code == 200:
        # Set the flag
        verify_correct = response.json()['data']

        # Update the table image
        update_table()

        # Verify answers
        if verify_correct:
            if game_scoreboard.level == 8:
                disable_components()
                congratulate()
                window.after(5000)
                flag = messagebox.askyesno(
                    "You Win!", "Dp you want to start a new game?")
                if flag:
                    reset_game()
                else:
                    window.destroy()
                return
            level_up_gui()
        else:
            wrong_answer()
        return
    else:
        # print(response.json())
        messagebox.showerror("SQL Error!", response.json()['error'])


game_scoreboard = Scoreboard()

# Build the main GUI Window
window = Tk()

# Set the dimensions of the window
window.geometry("1200x666")

# Set Background Color
window.configure(bg="#5F95FF")

# Build a Canvas object to the window for adding widgets
canvas = Canvas(
    window,
    bg="#5F95FF",
    height=666,
    width=1200,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

# Main App Text
canvas.create_text(
    100.0,
    25.0,
    anchor="nw",
    justify="center",
    text="SQL\nMurder\nMystery",
    fill="#FFFFFF",
    font=("Montserrat Bold", 40 * -1),
)

# Off White Rectangle on the right of the canvas
canvas.create_rectangle(
    400.0,
    0.0,
    1200.0,
    666.0,
    fill="#FFFFFF",
    outline="")

# Points Board
points_board_img = PhotoImage(
    file=relative_to_assets("entry_1.png"))


points_board_bg = canvas.create_image(
    1090.5,
    73.0,
    image=points_board_img
)

points_board_entry = Entry(
    bd=0,
    bg="#EFEFEF",
    fg="#000716",
    highlightthickness=0
)

points_board_entry.place(
    x=1018.0,
    y=25.0,
    width=145.0,
    height=0
)

canvas.create_text(
    1060.0,
    32.0,
    anchor="ne",
    text="Points",
    fill="#5F95FF",
    font=("Montserrat Bold", 14 * -1)
)

points_counter = canvas.create_text(
    1060.0,
    52.0,
    anchor="nw",
    fill="#5F95FF",
    font=("Montserrat Bold", 48 * -1),
    text="20"
)

# Help Button
help_button_image = PhotoImage(
    file=relative_to_assets("button_1.png"))

help_button = Button(
    image=help_button_image,
    borderwidth=0,
    highlightthickness=0,
    command=disable_components,
    relief="flat"
)

help_button.place(
    x=1003.0,
    y=268.0,
    width=175.0,
    height=48.0
)

# Execute Button
execute_button_image = PhotoImage(
    file=relative_to_assets("button_2.png"))

execute_button = Button(
    image=execute_button_image,
    borderwidth=0,
    highlightthickness=0,
    command=verify_answers,
    relief="flat"
)

execute_button.place(
    x=1003.0,
    y=547.0,
    width=175.0,
    height=90.0
)

# Hint Button
hint_button_image = PhotoImage(
    file=relative_to_assets("button_3.png"))

hint_button = Button(
    image=hint_button_image,
    borderwidth=0,
    highlightthickness=0,
    command=show_hint,
    relief="flat"
)

hint_button.place(
    x=1003.0,
    y=203.0,
    width=175.0,
    height=48.0
)

# Schema Button
schema_button_image = PhotoImage(
    file=relative_to_assets("button_4.png"))

schema_button = Button(
    image=schema_button_image,
    borderwidth=0,
    highlightthickness=0,
    command=update_detective_text,
    relief="flat"
)

schema_button.place(
    x=1003.0,
    y=138.0,
    width=175.0,
    height=48.0
)

# Detective Image
detective_image = PhotoImage(
    file=relative_to_assets("image_1.png"))
detective = canvas.create_image(
    200.0,
    613.0,
    image=detective_image
)

# Text Bubble
speech_bubble_image = PhotoImage(
    file=relative_to_assets("image_2.png"))
speech_bubble = canvas.create_image(
    200.0,
    342.0,
    image=speech_bubble_image
)

# Detective Speech Entry Widget
detective_speech_image = PhotoImage(
    file=relative_to_assets("entry_2.png"))

detective_speech_entry_bg = canvas.create_image(
    200.0,
    324.5,
    image=detective_speech_image
)

# Table
canvas.create_rectangle(
    433.0,
    25.0,
    986.0,
    316.0,
    fill="#D9D9D9",
    outline="")

table_label = Label(
    window,
    text=""
)

table_label.place(
    x=433.0,
    y=25.0,
    width=553,
    height=291,
    anchor="nw"
)

# SQL Entry
sql_entry_image = PhotoImage(
    file=relative_to_assets("entry_3.png"))

sql_entry_bg = canvas.create_image(
    709.5,
    495.5,
    image=sql_entry_image
)

sql_entry = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

sql_entry.place(
    x=433.0,
    y=350.0,
    width=553.0,
    height=289.0
)

detective_question = canvas.create_text(
    200.0,
    325.0,
    anchor="center",
    justify="center",
    text=questions[game_scoreboard.level - 1],
    fill="#eb4034",
    font=("Bebas Regular", 13 * -1)
)


window.resizable(False, False)
window.mainloop()
